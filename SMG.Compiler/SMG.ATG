/*
	Syntax definition for the SMG utility.

	Based on COCO/R, see http://www.ssw.uni-linz.ac.at/Coco/
*/

COMPILER SMG

IGNORECASE
CHARACTERS
 letter = 'A'..'Z' + 'a'..'z'.
 digit = '0'..'9'. 
 quote = '"'.
 anyButQuote = ANY - '"'.

TOKENS
 identifier = letter {letter | digit}.
 number = digit {digit}.
 string = quote {anyButQuote} quote. 

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO '\n' 

IGNORE '\r' + '\n' + '\t' 

PRODUCTIONS

	SMG =									(. string name; .)
		"SMG" Identifier<out name>			(. 
												if(null != SM) { SM.Name = name; } 

												UpdateLocation();
											.)
		Options
		{									(. UpdateLocation(); .)
			Rule
		}
		|
		"EVAL"								(. ICondition c; .)
		Condition<out c>					(. Result = c; .)
		.

	Rule									(. Rule rule = new Rule(); .)
	=									
		Trigger<rule>
		| 
		Guard<rule> 
		| 
		Declare 
		| 
		Assert
		.

	Options =								
		[
			"NAMESPACE"						(. IdList idlist; .)
			(
				DottedList<out idlist>		(. Parameters.Namespace = idlist.ToNamespace(); .)
				|
				string						(. Parameters.Namespace = t.val.Trim(new char[] { '\"' }); .)
			)
		]
		[
			"BASE"							(. IdList idlist; .)
			DottedList<out idlist>			(. Parameters.BaseClassName = idlist.ToNamespace(); .)
		]
		[
			"EVENT"							(. string name; .)
			Identifier<out name>			(. Parameters.EventTypeName = name; .)				
		]
		[
			"LANGUAGE"
			(
				"C#"						(. Parameters.Language = "C#"; .)
				|
				"jscript"					(. Parameters.Language = "jscript"; .)
			)
		]
		[
			"PARTIAL"						(. Parameters.IsPartial = true; .)
		]
		.

	Declare 
	= 
		"DECLARE"							(. StateType stype; .) 
		TypeReference<out stype>				
		[ 
			VariableDefinition<stype>
			{ 
				',' 
				VariableDefinition<stype> 
			}
		]
		.

	Assert									(. ICondition cond; .)
	= 
		"ASSERT"
		Condition<out cond>					(. SM.AddAssertion(cond); .)
		.

	Trigger<Rule top>						(. 
												string name;
												var rule = new Rule(top, false);
												UpdateLocation();
											.)
	=										
		"TRIGGER"
		Identifier<out name>				(. rule.Event = SM.AddEvent(name); .)
		{ 
			Action<rule>			
		}
											(. rule.CreateTrigger(SM); .)
		{									(. Rule when = new Rule(rule, true); .)
			WhenClause<when>
			{ 
				Action<when>			
			}
											(. when.CreateTrigger(SM); .)
		}
		.

	Guard<Rule top>							(.	
												string name = null; 
												ICondition cond;
												GuardType gtype = GuardType.Undefined; 

												UpdateLocation();
											.)
	=
		"GUARD" 
		[ Identifier<out name> ]
		{
			"WHEN"							(. var when = new Rule(top, false); .)					
			( 
				"ENTER"						(. gtype = GuardType.ENTER; .)
				| 
				"LEAVE"						(. gtype = GuardType.LEAVE; .)
				| 
			)
			Condition<out cond>				(. when.NestCondition(cond); .)
			{ 
				Action<when>			
			}
											(. when.CreateGuard(SM, name, gtype); .)
		}

		.

	VariableDefinition<StateType stype>		(. string name; .)
	=
		Identifier<out name>				(. SM.AddVariable(name, stype); .)
		.

	WhenClause<Rule rule>
	=
		"WHEN"								(. ICondition when; .)
		Condition<out when>					(. rule.NestCondition(when); .)
		. 

	
	Action<Rule rule>						(. string name; ICondition c; .)
	=
		"SEND" Identifier<out name>			(. rule.AddEffect(new SendEffect(SM, name)); .)
		|
		"CALL" Identifier<out name>			(. rule.AddEffect(new CallEffect(SM, name)); .)
		|
		"BEGIN"
		{
			"WHEN"							(. var nested = new Rule(rule, true); .)
			Condition<out c>				(. nested.NestCondition(c); .)
			{
				Action<nested>
			}
											(. nested.CreateNested(SM); .)
			|
			Trigger<rule>
			|
			Guard<rule>
		}
		"END"
		.
		

	Condition<out ICondition cond>				(. cond = null; ICondition other = null; .)
	=
		SimpleCondition<out cond>
		{ 
			"AND"
			SimpleCondition<out other>			(. cond = cond.Intersection(other); .)
			|
			"OR" 
			SimpleCondition<out other>			(. cond = cond.Union(other); .)
		}		
												(. cond.Freeze(); .)
		[
			"=>"								(. ICondition rcond; .)
			Condition<out rcond>				(. 
													rcond.Freeze();
													cond = new TransitionCondition(cond, rcond);
													cond.Freeze();
												.)
		]
		.

	SimpleCondition<out ICondition cond>		(. cond = null; ICondition other = null; .)
	=
		"NOT" SimpleCondition<out other>		(. cond = other.Invert(); .)
		|
		StateCondition<out cond>
		|
		'(' 
			Condition<out cond> 
		')'
		.

	StateCondition<out ICondition cond>			
												(. string varname; Variable v; StateCondition scond = null; IdList pre, post; 
													cond = null; 
												.)
	=	
		Identifier<out varname>					(. v = SM.GetVariable(varname); .)
		[
		'('										(. scond = new StateCondition(v); .)
			StateIdentifierList<out pre>		(. scond.SetPreStates(pre); .)
			[
				"=>" 
				StateIdentifierList<out post>	(. scond.SetPostStates(post); .)
			]
		')'
		]
												(. cond = (ICondition)scond ?? new BooleanCondition(v); .)
		.

	StateIdentifierList<out IdList list>		(. list = null; .)
	= 
		IdentifierList<out list>
		|
		"*"										(. list = new IdList(true); .)
		|
		"0"										(. list = new IdList("0"); .)
		|
		"1"										(. list = new IdList("1"); .)
		.

	TypeReference<out StateType stype>			(. stype = null; string name; .)
	=									
		Identifier<out name>					(. stype = SM.GetStateType(name); .)
		[									
			'('									(. if(null != stype) 
														throw new CompilerException(ErrorCode.TypeRedefinition, 
															"type '" + name + "' is already defined."); 
												.)
												(. stype = SM.AddSimpleType(name); .)
												(. IdList list; .)
			 IdentifierList<out list>			(. stype.AddStateNames(list); .)
			')'
												
												(. stype.Freeze(); .)
		]
												(. if(null == stype)
													 throw new CompilerException(ErrorCode.UndefinedType, 
														"type '" + name + "' is undefined."); 
												.)
		.										

	IdentifierList<out IdList list>				(. list = new IdList(); string name; .)
	= 
		Identifier<out name>					(. list.Add(name); .)
		{ ',' Identifier<out name>				(. list.Add(name); .)
		}
		.

	Identifier<out string name> 
	=
		identifier								(. name = t.val; .)
		.
		
	DottedList<out IdList list>					(. list = new IdList(); string name; .)
	= 
		Identifier<out name>					(. list.Add(name); .)
		{ '.' Identifier<out name>				(. list.Add(name); .)
		}
		.

END SMG.