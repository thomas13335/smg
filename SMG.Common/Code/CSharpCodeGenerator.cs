using SMG.Common.Effects;
using SMG.Common.Transitions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SMG.Common.Code
{
    /// <summary>
    /// Generates C# target code.
    /// </summary>
    public class CSharpCodeGenerator : CodeGenerator
    {
        #region Construction

        public CSharpCodeGenerator(CodeWriter writer)
            : base(writer)
        { }

        #endregion

        #region Overrides

        protected override void EmitPreamble()
        {
            Writer.AppendLine("/* class " + SM.Name + " generated by SMG */");
            Writer.AppendLine();
            Writer.AppendLine("using System.Text;");
            Writer.AppendLine();

            if(null != Parameters.Namespace)
            {
                Writer.AppendLine("namespace " + Parameters.Namespace);
                EmitEnterBlock();
            }
        }

        protected override void EmitFooter()
        {
            if (null != Parameters.Namespace)
            {
                EmitLeaveBlock();
            }
        }

        protected override void EmitEventTypeDeclaration()
        {
            EmitEnumeratedType(Parameters.EventTypeName, SM.Events.Select(e => e.Name));
        }

        protected override void EmitTypeDeclaration(string typename, IEnumerable<string> values)
        {
            EmitEnumeratedType(typename, values);
        }

        protected override void EmitClassHeader()
        {
            Writer.Append(Parameters.DefaultProtection + " partial class " + SM.Name);
            if (null != Parameters.BaseClassName)
            {
                Writer.Append(" : " + Parameters.BaseClassName);
                if (Parameters.IsBaseClassTemplate)
                {
                    Writer.Append("<" + Parameters.EventTypeName + ">");
                }
            }

            Writer.AppendLine();
        }

        protected override void EmitVariableDeclaration(Variable v)
        {
            Writer.AppendLine("private " + GetTypeID(v.Type) + " " + v.Name + ";");
        }

        protected override void EmitVariableAssignment(Variable v, int stateindex)
        {
            var stype = v.Type;

            Writer.Append(v.Name + " = ");

            if (stype.IsBoolean)
            {
                Writer.Append(stateindex == 0 ? "false" : "true");
            }
            else
            {
                Writer.Append(stype.Name + "." + stype.GetStateName(stateindex));
            }

            Writer.AppendLine(";");
        }

        protected override void EmitProcessEventMethodHeader()
        {
            Writer.AppendLine("protected virtual void ProcessEvent(" + Parameters.EventTypeName + " e)");
        }

        protected override void EmitHandlerHeader(string name)
        {
            Writer.AppendLine("protected virtual void " + name + "_Handler()");
        }

        protected override void EmitMethodDeclaration(string method)
        {
            // Writer.AppendLine("protected virtual void " + method + "() { }");
        }

        protected override void EmitMethodDeclarations()
        {
            EmitStateString();

            base.EmitMethodDeclarations();
        }

        protected override void EmitSwitchCaseLabel(Event e)
        {
            var caselabel = Parameters.EventTypeName + "." + e.Name;
            Writer.AppendLine("case " + caselabel + ":");
        }

        protected override void EmitEffect(Effect effect)
        {
            if(effect is CallEffect)
            {
                var call = (CallEffect)effect;
                Writer.AppendLine(call.MethodName + "();");
            }
            else if(effect is SendEffect)
            {
                var send = (SendEffect)effect;
                Writer.AppendLine("PostEvent(" + Parameters.EventTypeName + "." + send.Event.Name + ");");
            }
            else
            {
                throw new NotImplementedException("effect [" + effect + "] is not supported.");
            }
        }

        #endregion

        #region Private Methods

        private string GetTypeID(StateType stype)
        {
            return stype.IsBoolean ? "bool" : stype.Name;
        }

        private void EmitEnumeratedType(string typename, IEnumerable<string> values)
        {
            Writer.AppendLine(Parameters.DefaultProtection + " enum " + typename);
            Writer.EnterBlock();
            Writer.Append(values.ToSeparatorList());
            Writer.AppendLine();
            Writer.LeaveBlock();
            Writer.AppendLine();
        }

        private void EmitStateString()
        {
            Writer.AppendLine("public string ToStateString()");
            Writer.EnterBlock();
            Writer.AppendLine("var Writer = new StringBuilder();");
            foreach (var v in SM.Variables)
            {
                Writer.AppendLine("Writer.Append(\" " + v.Name + "\" + \"(\");");
                Writer.AppendLine("Writer.Append(" + v.Name + ".ToString());");
                Writer.AppendLine("Writer.Append(\")\");");
            }

            Writer.AppendLine("return Writer.ToString();");
            Writer.LeaveBlock();
            Writer.AppendLine();

        }

        #endregion
    }
}
